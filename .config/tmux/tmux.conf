# Some Useful Default mappings
# TODO add more here and then move to Obsidian
# L - last session
# <space> - rotate layouts (vertical & horizontal)
# c - new window
# . - move window
# , - rename window
# q - display pane numbers
# ; - go to last pane
# ! - extract current pane as a new window
# _ - unmapped
# w - can be mapped to something else as I always use s (for sessions); maybe for swap-windows

# changing ctrl-a as the tmux prefix
unbind C-b
set-option -g prefix C-a
bind-key C-a send-prefix

# setting features to take advantage of alacritty
set-option -sa terminal-features ',alacritty:RGB'
set-option -a terminal-overrides ",alacritty:RGB"
# set -g default-terminal "screen-256color"

# When enabled, focus events are requested from the terminal if supported and passed through to applications running in
# tmux.
set-option -g focus-events on

# change tmux status bar look
set -g status-left-length 40
set -g status-style 'bg=#333333 fg=#89B4FA'

# use mouse to resize
set -g mouse on

# prefix + r will reload the config and print the following message
bind-key r source-file ~/.config/tmux/tmux.conf \; display-message "Tmux config reloaded!"

# If running prefix + r is not sufficient, try running prefix + I also. If all fails, restart the tmux.

# change the base (first) index used for windows and panes from 0 to 1
set -g base-index 1

# SESSION-LEVEL SHORTCUTS

# bind-key S rename-session

# WINDOW-LEVEL SHORTCUTS

# using | for vertical split and - for horizontal split
# unbind-key "
# unbind-key %
# bind | split-window -hc "#{pane_current_path}" \; select-pane -L \; resize-pane -x 110
bind | split-window -hc "#{pane_current_path}"
bind - split-window -vc "#{pane_current_path}" \; resize-pane -y 35%

unbind C
bind C new-window -c "#{pane_current_path}"

# PANE-LEVEL SHORTCUTS

# use hjkl for moving between panes
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# vim-back button for last window
bind -r ^ last-window

# swapping n p for moving between windows (n-left; p-right)
bind n previous-window
bind p next-window

# use N P for moving between sessions
bind N switch-client -n
bind P switch-client -p

# prefix + m to maximize the pane
bind-key m resize-pane -Z

# prefix + M to minimize the pane and maximize the pane above
bind-key M select-pane -U \; resize-pane -Z

# setting up tmux (vi) copy mode
bind-key v copy-mode
set-window-option -g mode-keys vi
bind-key -T copy-mode-vi 'v' send -X begin-selection # start selecting text with "v"
bind-key -T copy-mode-vi 'V' send -X select-line
bind-key -T copy-mode-vi 'y' send -X copy-selection # copy text with "y"
unbind -T copy-mode-vi Mo'u'seDragEnd1Pane # don't exit copy mode when dragging with mouse


# remove delay for exiting insert mode with ESC in Neovim
set -sg escape-time 10

set -g @plugin 'tmux-plugins/tpm' # tpm plugin

# list of tmux plugins
set -g @plugin 'tmux-plugins/tmux-resurrect' # persist tmux sessions after computer restart
# set -g @plugin 'tmux-plugins/tmux-continuum' # automatically saves sessions for you every 15 minutes

unbind-key f
bind-key f split-window ~/Documents/githubRepos/dotfiles/scripts/mac/tmux_sessionizer.sh
# TODO Find a way to make this independent of github repo location. Currently `split-window CMD` run CMD command using the
# sh shell which doesn't know tmux-sessionizer (it's an alias defined in .zshrc)

# # replace by HJKL (and maybe ASDF)
# bind-key -r G run-shell "~/.local/bin/tmux-sessionizer ~/work/nrdp"
# bind-key -r C run-shell "~/.local/bin/tmux-sessionizer ~/work/tvui"
# bind-key -r R run-shell "~/.local/bin/tmux-sessionizer ~/work/milo"
# bind-key -r L run-shell "~/.local/bin/tmux-sessionizer ~/work/hpack"

# bind-key -r i run-shell "tmux neww tmux-cht.sh"
# bind -r D neww -c "#{pane_current_path}" "[[ -e TODO.md ]] && nvim TODO.md || nvim ~/.dotfiles/personal/todo.md"

set -g @plugin 'niksingh710/minimal-tmux-status' # update tmux theme
set -g @minimal-tmux-bg "#698DDA"

# To save the Tmux environment, we hit <prefix> + <C-s> in the Tmux Terminal. If the save was successful, a message of
# Tmux environment saved! would pop up.

# To restore the Tmux environment, we hit Ctrl + b + Ctrl + r in the Tmux Terminal. If the restore was successful, a
# message of Tmux restore complete! would pop up. All the sessions, windows, and panels would be saved and restored with
# Tmux Resurrect. Some of the running commands, such as htop, would be restored as well.

# set -g @resurrect-capture-pane-contents 'on'
# set -g @continuum-restore 'on'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.config/tmux/plugins/tpm/tpm'
